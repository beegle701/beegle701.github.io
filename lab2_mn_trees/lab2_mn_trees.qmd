---
title: "Lab 2: Minnesota Trees"
---

```{r, echo=TRUE, results='hide', message=FALSE, warning=FALSE}
library(dplyr)
library(readr)

tree_data <- read_csv("data/tree_dat.csv")

```

### Question 1

**Read in the Minnesota tree growth dataset. Use glimpse to understand the structure and names of the dataset. describe the structure and what you see in the dataset?**

**Answer:**

```{r}

glimpse(tree_data)

```

The data set contains various different attributes of tree growth in Minnesota. This includes data such as year collected, species, age, and physical measurements. It is in a table (comma separated values) with 131,284 rows and 8 columns.

### Question 2

**How many records have been made in stand 1?**

**Answer:**

```{r}
tree_data %>%
  filter(standID == 1) %>%
  count()
```

The above code indicates that there are 979 records made in stand 1.

### Question 3

**How many records of the *Abies balsamea* and *Pinus strobus* species have been made?**

**Answer:**

```{r}
abies_balsamea_count <- tree_data %>%
  filter(species == "ABBA") %>%
  nrow()

pinus_strobus_count <- tree_data %>%
  filter(species == "PIST") %>%
  nrow()

abies_balsamea_count
pinus_strobus_count
```

We can see that there are 13033 *Abies balsamea* and 4188 *Pinus strobus* within the dataset.

### Question 4

**How many trees are older then 200 years in the last year of the dataset?**

**Answer:**

```{r}

last_age <- max(tree_data$year)

tree_data %>%
  filter(year == last_age, age > 200) %>%
  count()
```

We can see that there are only 7 trees that are greater than 200 years old in 2007 which is the last year of the dataset.

### Question 5

**What is the oldest tree in the dataset found using slice_max?**

**Answer:**

```{r}
tree_data %>%
  slice_max(age, n = 1)
```

The tree with ID number 24 is the oldest tree in the dataset.

### Question 6

**What are the oldest 5 trees recorded in 2001?**

**Answer:**

```{r}
tree_data %>%
  filter(year == 2001) %>%
  slice_max(age, n = 5)
```

According to the data the 5 oldest trees in 2001 are 263, 259, 212, 206, and 206 years old.

### Question 7

**How many trees are in a 30% sample of those recorded in 2002?**

**Answer:**

```{r}
tree_data %>%
  filter(year == 2002) %>%
  slice_sample(prop = 0.3) %>%
  count()
```

We can see there are 687 trees.

### Question 8

**Filter all trees in stand 5 in 2007. Sort this subset by descending radius at breast height (rad_ib) and use slice_head() to get the top three trees**

**Answer:**

```{r}
tree_data %>% 
  filter(standID == 5, year == 2007) %>% 
  arrange(desc(rad_ib)) %>% 
  slice_head(n = 3) %>% 
  select(treeID)
```

The tree ID's that have the highest radius at breast height in stand 5 during 2007 are tree 128, 157, 135.

### Question 9

**Reduce your full data.frame to \[treeID, stand, year and radius at breast height\]. filter to only those in stand 3 with records from 2007, use slice_min to pull the smallest three trees measured that year.**

**Answer:**

```{r}
tree_data %>% 
  select(treeID, standID, year, rad_ib) %>%
  filter(standID == 3, year == 2007) %>%
  slice_min(rad_ib, n = 3)
```

The tree smallest trees in 2007 stand 3 based only on treeID, stand, year, and radius at breast height are tree numbers 50, 56, 36.

### Question 10

**Use select to remove the stand column. Use glimpse to show the dataset.**

**Answer:**

```{r}
tree_data %>%
  select(-stand) %>%
  glimpse()
```

### Question 11

**Identify an option that would help select all columns with the string "ID" in the name. Use glimpse to view the remaining dataset.**

**Answer:**

```{r}
tree_data %>%
  select(contains("ID")) %>%
  glimpse()
```

### Question 12

**Find a selection pattern that captures all colums with either 'ID' or 'stand' in the name. Use glimpse to verify the selection.**

**Answer:**

```{r}
tree_data %>%
  select(contains("ID") | contains("stand")) %>%
  glimpse()
```

### Question 13

**Permanently rename rad_inc and inc to include '\_\[unit\]'. Use glimpse to view your new data frame**

**Answer:**

```{r}
tree_data <- tree_data %>%
  rename(
    rad_ib_mm = rad_ib,
    inc_mm = inc
  )
glimpse(tree_data)
```

### Question 14

**Use mutate to compute diameter at breast height in centimeters and basal area in meters squared. What is the mean basal area of the species POTR in 2007?**

**Answer:**

```{r}
tree_data <- tree_data %>%
  mutate(
    DBH_cm = rad_ib_mm / 10*2,
    BA_m2 = 0.00007854 * (DBH_cm^2)
  )
tree_data %>%
  filter(species == "POTR", year == 2007) %>%
  summarize(mean_BA = mean(BA_m2, na.rm = TRUE))
```

We can see the mean basal area of POTR trees in 2007 is .03696619 m\^2.

### Question 15

**Lets say for the sake of our study, trees are not established until they are 5 years of age. Use if_else to add a boolean column to our dataset called established that is TRUE if the age is greater then 5 and FALSE if less then or equal to 5. Once added, use count to determine how many records are from established trees.**

**Answer**:

```{r}
tree_data <- tree_data %>%
  mutate(established = if_else(age > 5, TRUE, FALSE))

tree_data %>%
  count(established)
```

### Question 16

**Use mutate and case_when to add a new column to your data.frame that classifies each tree into the proper DBH_class. Once done, limit your dataset to the year 2007 and report the number of each class with count.**

**Answer:**

```{r}
tree_data <- tree_data %>%
  mutate(DBH_class = case_when(
        DBH_cm <= 2.5 ~ "seedling",
        DBH_cm <= 10 ~ "sapling",
        DBH_cm <= 30 ~ "pole",
        TRUE ~ "sawlog"))

tree_data %>%
  filter(year == 2007) %>%
  count(DBH_class)

```

### Question 17

**Compute the mean DBH (in cm) and standard deviation of DBH (in cm) for all trees in 2007. Explain the values you found and their statistical meaning.**

**Answer:**

```{r}
tree_data %>%
  filter(year == 2007) %>%
  summarize(
    mean_DBH = mean(DBH_cm, na.rm = TRUE),
    sd_DBH = sd(DBH_cm, na.rm = TRUE)
  )
```

The mean DBH is the average diameter at breast height for trees in 2007. The standard deviation is 6.138643 which means that in a normally shaped curve there will be a certain percentage of trees between the mean_dbh +- (sd_DBH \* n standard deviations).

### Question 18

**Compute the per species mean tree age using only those ages recorded in 2003. Identify three species with the oldest mean age.**

**Answer:**

```{r}
tree_data %>%
  filter(year == 2003) %>%
  group_by(species) %>%
  summarize(mean_age = mean(age, na.rm = TRUE)) %>%
  arrange(desc(mean_age)) %>%
  slice_head(n = 3)
```

### Question 19

**In a single summarize call, find the number of unique years with records in the dataset along with the first and last year recorded.**

**Answer:**

```{r}
tree_data %>%
  summarize(
    unique_years = n_distinct(year),
    first_year = min(year),
    last_year = max(year)
  )
```

### Question 20

**Determine the stands with the largest number of unique years recorded. Report all stands with largest (or tied with largest) temporal record.**

**Answer**:

```{r}
tree_data %>%
  group_by(standID) %>%
  summarize(unique_years = n_distinct(year)) %>%
  filter(unique_years == max(unique_years))
```

### Final Question

**We are interested in the annual DBH growth rate of each species through time, but we only want to include trees with at least 10 year growth record. To identify this, we need to identify the per year growth made by each tree, their total growth record, and then average that, and compute the standard deviation, across the species.**

```{r}
tree_data <- tree_data %>% 
  arrange(species, treeID, year) %>%
  group_by(species, treeID) %>%
  mutate(annual_growth = DBH_cm - lag(DBH_cm)) %>%
  filter(!is.na(annual_growth))

tree_data_ten <- tree_data %>%
  group_by(species, treeID) %>%
  filter(n() >= 10)

growth_summary <- tree_data_ten %>% 
  group_by(species) %>% 
  summarize(
    total_growth = sum(annual_growth),
    avg_growth = mean(annual_growth),
    growth_sd = sd(annual_growth),
    .groups = 'drop'
  )

fastest_species <- growth_summary %>%
  arrange(desc(avg_growth)) %>%
  head(3)
slowest_species <- growth_summary %>%
  arrange(avg_growth) %>% 
  head(3)

fastest_species
slowest_species
```
